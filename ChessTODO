# TODO: THE BOARD
# Every board has squares(64)
# Have the board draw 64 squares 
# Those squares need to be labeled from left to right A - H 
# and bottom to Top 1 - 8
# Each of the squares needs to contain the piece it (may) hold and its notation


# TODO: Pieces 
# Each pieces has state (Captured or not caputred?)
# Each piece has behavior 
# That behavior includes what constitues a valid move...hrmmmmm
# 

# TODO: INPUT 
# The user should input the starting square and the ending square 
# I think this is where the CPU should calc if it's a valid move or not 
#


# TODO: NOTATION 



import unittest


def add(x, y):
    """Adds the given args 
    
    Recieves args provided from user input
    and adds them together.  Bad things may happen
    with unsanitized input 
    
    Args:
        X:  First term provided by the user 
        Y:  Second term provided by the user 
    
    Returns:
        The sum of X and Y.  For example
        1 + 1 = 2
        
    Raises:
        TypeError: unsupported operand type(s) for...
    
    """
    
    return x + y 



class MyTest(unittest.TestCase):
  def test(self):
    """Tests the add function"""
    self.assertEqual(add(1, 2), 4) 
    
    
z = MyTest()
z.test()
